import os.path

# Build tools
asmBuilder = Builder(action = 'asm.py -o $TARGET $SOURCE', suffix=".o", src_suffix=[".s", ".asm"], single_source=True, src_builder="Natrix")
natrixBuilder = Builder(action = 'natrix.py --cpp-arg=-Ilib -o $TARGET $SOURCE', suffix=".s", src_suffix=".na", single_source=True, source_scanner=CScanner)
def linkGenerator(source, target, env, for_signature):
    return f"link.py -m {target[1]} -o {target[0]} {' '.join(str(s) for s in source)}"

def loaderLinkGenerator(source, target, env, for_signature):
    return f"link.py --layout=loader.yaml --api-out={target[2]} -m {target[1]} -o {target[0]} {' '.join(str(s) for s in source)}"

def extensionLinkGenerator(source, target, env, for_signature):
    return f"link.py --slim --layout=extension.yaml --api-in={source[0]} -m {target[1]} -o {target[0]} {' '.join(str(s) for s in source[1:])}"

def appLinkGenerator(source, target, env, for_signature):
    return f"link.py --slim --layout=app.yaml -m {target[1]} -o {target[0]} {' '.join(str(s) for s in source)}"

def linkEmitter(target, source, env):
    t = target[0]
    base,ext = os.path.splitext(str(t))
    target.append(f"{base}.map")
    return target, source

def loaderLinkEmitter(target, source, env):
    t = target[0]
    base,ext = os.path.splitext(str(t))
    target.append(f"{base}.map")
    target.append(f"{base}.api")
    return target, source

linkBuilder = Builder(generator=linkGenerator, suffix=".bin", src_suffix=".o", src_builder="Asm", emitter=linkEmitter)
loaderLinkBuilder = Builder(generator=loaderLinkGenerator, suffix=".bin", src_suffix=".o", src_builder="Asm", emitter=loaderLinkEmitter)
extensionLinkBuilder = Builder(generator=extensionLinkGenerator, suffix=".ext", src_suffix=".o", src_builder="Asm", emitter=linkEmitter)
appLinkBuilder = Builder(generator=appLinkGenerator, suffix=".app", src_suffix=".o", src_builder="Asm", emitter=linkEmitter)

imageBuilder = Builder(action = './mkfat.sh data $SOURCES', suffix=".img", src_suffix=[".app", ".ext"])

env = Environment(BUILDERS = {
    'Asm' : asmBuilder,
    'Natrix': natrixBuilder,
    'Bin': linkBuilder,
    'Loader': loaderLinkBuilder,
    'Extension': extensionLinkBuilder,
    'App': appLinkBuilder,
    'Image': imageBuilder}, ENV={'PATH': os.environ['PATH']})

env.PrependENVPath("PATH", "../tools")
env.PrependENVPath("PATH", "../tools/natrix")
env["NATRIX_DIR"] = "../tools/natrix"
env["CPPPATH"] = "lib" # needed for scanner

env.Command('lib/keymap.s', ['lib/keymap.py', 'lib/ps2keyboard.h'], './lib/keymap.py lib/ps2keyboard.h lib/keymap.s')

# Libraries
bcdf = Split('''
    lib/bcdf.asm lib/bcdf_addsub.asm lib/bcdf_mul.asm lib/bcdf_div.asm lib/bcdf_print.asm
    ''')
natrix = ['$NATRIX_DIR/runtime/natrix_runtime.asm']
rom_startup = ['$NATRIX_DIR/runtime/rom_startup.asm']
os_startup = ['$NATRIX_DIR/runtime/os_startup.asm']
app_startup = ['$NATRIX_DIR/runtime/app_startup.asm']

ps2 = Split('lib/ps2.na lib/ps2keyboard.na lib/keymap.s')

vga = Split('''
    lib/vga.asm
    lib/vga_console.na
    lib/vga_numbers.na
    ''')

keyboard = ['lib/keyboard.asm']

lib = bcdf + vga + ps2 + keyboard + Split('''
    lib/string.na
    lib/entropy.na
    lib/random.na
    lib/more.na
    lib/line_edit.na
    lib/frame.na
    ''')

fat = Split('''
    lib/fat/fat.na
    lib/fat/name.na
    lib/fat/path.na
    ''')

quasipixel = Split('lib/qp/quasipixel.na lib/qp/qp_render.asm')

syscall = ['lib/os/syscall.asm']

# Apps
maze = Split('maze/main.na maze/game.na maze/maze.na')
life = Split('life/life.na life/life_next.asm')
calc = Split('calc/calc.asm')

env.Bin('alutest', 'test/alutest.asm')

env.Bin('memcheck', 'memcheck/memcheck.asm')

env.Bin('lotest', Split('memcheck/lotest.na') + rom_startup + natrix + lib)

env.Bin('vgatest', Split('test/vgatest.na') + rom_startup + natrix + lib)

env.Bin('ps2test', Split('test/ps2test.na') + rom_startup + natrix + lib)

env.Bin('ps2hightest', Split('test/ps2hightest.na') + rom_startup + natrix + lib)

env.Bin('cardtest', Split('test/cardtest.na lib/card.asm lib/log.na') + rom_startup + natrix + lib + fat)


env.Bin('tetris_rom', Split('tetris/main.na') + rom_startup + natrix + lib + quasipixel)

env.Loader('fileshell', Split('''
    fileshell/fileshell.na
    lib/card.asm
    lib/log.na
    fileshell/extension.asm
    fileshell/loload.asm
    fileshell/lorun.asm
    fileshell/progressbar.na
    fileshell/syscall.asm
    fileshell/syscall_impl.na
    fileshell/exec.na
    ''') + os_startup + natrix + lib + fat)

env.Extension('lo', Split('fileshell.api extension_base.asm test/lotest_ext.na lib/vga.asm'))

env.App('main', Split('''
    main.na
    test/trap.asm
    vga_demo.asm
    matrix.na''') + lib + natrix + maze + life + calc + app_startup + quasipixel)

env.App('calc', Split('''
    calc/app.na
    ''') + lib + natrix + app_startup)

env.App('maze', Split('''
    maze/app.na
    ''') + maze + lib + natrix + app_startup)

env.App('life', Split('''
    life/app.na
    ''') + life + quasipixel + lib + natrix + app_startup)

env.App('pong', Split('''
    pong/pong.na
    ''') + lib + natrix + app_startup)

env.App('edit', Split('''
    edit/edit.na
    lib/log.na
    ''') + lib + natrix + app_startup + syscall)

env.App('tetris', Split('tetris/main.na') + app_startup + natrix + lib + quasipixel)

env.Bin('mandelbrot', Split('mandelbrot/main.na') + rom_startup + natrix + lib + quasipixel)
env.App('mndlbrt', Split('mandelbrot/main.na') + app_startup + natrix + lib + quasipixel)

plot_sources = Split('''
    plot/main.na
    plot/tokenizer.na
    plot/pool.na
    plot/expr.na
    ''') + lib + natrix + quasipixel
env.App('plot', plot_sources + app_startup)
env.Bin('plot_rom', plot_sources + rom_startup)

env.Bin('stacktest', Split('''
    stacktest/main.na
    ''') + lib + natrix + rom_startup)

env.App('matrix', Split('matrix.na matrix_app.na') + lib + natrix + app_startup)

env.Image('image', Split('''
    main.app
    maze.app
    life.app
    pong.app
    edit.app
    tetris.app
    mndlbrt.app
    plot.app
    matrix.app
    '''))
